# Cloud Build Configuration - Production Environment
# Requires manual approval for deployment to 'lobbyist-registration'
# Includes comprehensive validation and audit trail

substitutions:
  _SERVICE_NAME: lobbyist-registration
  _REGION: us-west1
  _ENVIRONMENT: production

steps:
  # Step 1: Install dependencies
  - name: "node:20"
    id: "install-deps"
    entrypoint: npm
    args: ["ci"]
    waitFor: ["-"]

  # Step 2: Type checking and build (with Sentry source maps)
  - name: "node:20"
    id: "type-check"
    entrypoint: npm
    args: ["run", "build"]
    env:
      - "NODE_ENV=production"
    secretEnv: ["SENTRY_AUTH_TOKEN"]
    waitFor: ["install-deps"]

  # Step 3: Run tests (when implemented)
  # - name: 'node:20'
  #   id: 'run-tests'
  #   entrypoint: npm
  #   args: ['run', 'test:ci']
  #   waitFor: ['install-deps']

  # Step 4: Security audit (STRICT - fail on high vulnerabilities)
  - name: "node:20"
    id: "security-audit"
    entrypoint: npm
    args: ["audit", "--audit-level=high"]
    waitFor: ["install-deps"]

  # Step 5: Verify Prisma schema (COMMENTED OUT - requires DATABASE_URL)
  # Prisma schema is validated locally before commit
  # - name: "node:20"
  #   id: "verify-schema"
  #   entrypoint: npx
  #   args: ["prisma", "validate"]
  #   waitFor: ["install-deps"]

  # Step 6: Build Docker image
  - name: "gcr.io/cloud-builders/docker"
    id: "build-image"
    args:
      - "build"
      - "-f"
      - "Dockerfile"
      - "-t"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}:$SHORT_SHA"
      - "-t"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}:latest"
      - "-t"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}:production-$SHORT_SHA"
      - "--build-arg"
      - "NODE_ENV=production"
      - "."
    waitFor: ["type-check", "security-audit"]

  # Step 7: Scan Docker image for vulnerabilities
  - name: "gcr.io/cloud-builders/gcloud"
    id: "scan-image"
    entrypoint: bash
    args:
      - "-c"
      - |
        echo "Docker image vulnerability scanning happens automatically in Artifact Registry"
        echo "View scan results: https://console.cloud.google.com/artifacts/docker/$PROJECT_ID/${_REGION}/lobbyist-registry"
    waitFor: ["build-image"]

  # Step 8: Push image to Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    id: "push-image"
    args:
      - "push"
      - "--all-tags"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}"
    waitFor: ["build-image", "scan-image"]

  # Step 9: Tag production image with timestamp
  - name: "gcr.io/cloud-builders/docker"
    id: "tag-production"
    entrypoint: bash
    args:
      - "-c"
      - |
        TIMESTAMP=$$(date +%Y%m%d-%H%M%S)
        docker tag ${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}:$SHORT_SHA \
                   ${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}:production-$$TIMESTAMP
        docker push ${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}:production-$$TIMESTAMP
        echo "Production image tagged: production-$$TIMESTAMP"
    waitFor: ["push-image"]

  # ===========================================================================
  # MANUAL APPROVAL REQUIRED HERE (Configured in trigger settings)
  # Reviewer should:
  # 1. Check build logs above for any warnings
  # 2. Review git diff for changes being deployed
  # 3. Verify database migrations are safe (if any)
  # 4. Approve deployment in Cloud Build console
  # ===========================================================================

  # Step 10: Run database migrations (production)
  # IMPORTANT: Only runs AFTER manual approval
  # - name: 'node:20'
  #   id: 'run-migrations'
  #   entrypoint: bash
  #   args:
  #     - '-c'
  #     - |
  #       # Set up Cloud SQL proxy connection
  #       # npx prisma migrate deploy
  #       echo "Database migrations will be added when migrating to Cloud SQL"
  #   waitFor: ['tag-production']

  # Step 11: Deploy to Cloud Run (production)
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "deploy-service"
    entrypoint: gcloud
    args:
      - "run"
      - "deploy"
      - "${_SERVICE_NAME}"
      - "--image"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}:$SHORT_SHA"
      - "--region"
      - "${_REGION}"
      - "--platform"
      - "managed"
      - "--allow-unauthenticated"
      - "--add-cloudsql-instances"
      - "lobbyist-475218:us-west1:lobbyist-registration-db"
      - "--set-env-vars"
      - "NODE_ENV=production,ENVIRONMENT=${_ENVIRONMENT},NEXTAUTH_URL=https://lobbyist-registration-zzp44w3snq-uw.a.run.app"
      - "--update-secrets"
      - "DATABASE_URL=lobbyist-db-url:latest,SENTRY_DSN=sentry-dsn:latest,NEXT_PUBLIC_SENTRY_DSN=sentry-dsn:latest"
      - "--min-instances"
      - "1"
      - "--max-instances"
      - "20"
      - "--memory"
      - "1Gi"
      - "--cpu"
      - "1"
      - "--timeout"
      - "300"
      - "--no-traffic" # Deploy without traffic first (for blue-green)
    waitFor: ["tag-production"]

  # Step 12: Verify new revision is Ready (blue-green deployment)
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "verify-revision"
    entrypoint: bash
    args:
      - "-c"
      - |
        echo "Verifying new revision deployment..."

        # Get the latest revision
        REVISION=$$(gcloud run revisions list \
          --service ${_SERVICE_NAME} \
          --region ${_REGION} \
          --format='value(name)' \
          --limit=1)

        echo "Latest revision: $$REVISION"

        # Check if revision is Ready (retry up to 5 times)
        for i in {1..5}; do
          READY=$$(gcloud run revisions describe $$REVISION \
            --region ${_REGION} \
            --format='value(status.conditions.status)' | grep -c "True")

          if [ "$$READY" -gt 0 ]; then
            echo "✅ Revision is Ready!"
            echo "Revision deployed with --no-traffic (blue-green deployment)"
            echo "Traffic will be routed after manual approval in next step"
            exit 0
          else
            echo "Revision not ready yet, waiting... (attempt $$i/5)"
            sleep 10
          fi
        done

        echo "❌ Revision failed to become Ready after 5 attempts"
        exit 1
    waitFor: ["deploy-service"]

  # Step 13: Route 100% traffic to new revision (blue-green deployment)
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "route-traffic"
    entrypoint: gcloud
    args:
      - "run"
      - "services"
      - "update-traffic"
      - "${_SERVICE_NAME}"
      - "--region"
      - "${_REGION}"
      - "--to-latest"
    waitFor: ["verify-revision"]

  # Step 14: Verify production deployment
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "verify-production"
    entrypoint: bash
    args:
      - "-c"
      - |
        SERVICE_URL=$$(gcloud run services describe ${_SERVICE_NAME} \
          --region ${_REGION} \
          --format 'value(status.url)')

        echo "================================================"
        echo "✅ PRODUCTION DEPLOYMENT SUCCESSFUL"
        echo "================================================"
        echo "Service URL: $$SERVICE_URL"
        echo "Build ID: $BUILD_ID"
        echo "Commit SHA: $SHORT_SHA"
        echo "Deployed: $$(date)"
        echo "================================================"
        echo ""
        echo "Post-deployment verification:"
        echo "1. Check service health: curl $$SERVICE_URL"
        echo "2. Monitor logs: gcloud logging read \"resource.type=cloud_run_revision\" --limit=50"
        echo "3. View metrics: https://console.cloud.google.com/run/detail/${_REGION}/${_SERVICE_NAME}/metrics"
        echo ""
        echo "Rollback if needed:"
        echo "  gcloud run services update-traffic ${_SERVICE_NAME} --region ${_REGION} --to-revisions=PREVIOUS_REVISION=100"
        echo "================================================"
    waitFor: ["route-traffic"]

# Build configuration
options:
  machineType: "E2_HIGHCPU_8"
  logging: CLOUD_LOGGING_ONLY
  dynamicSubstitutions: true

# Store all images for audit trail
images:
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}:$SHORT_SHA"
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}:latest"
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/lobbyist-registry/${_SERVICE_NAME}:production-$SHORT_SHA"

# Longer timeout for production (includes approval wait time)
timeout: "3600s" # 1 hour

# Available secrets from Secret Manager
availableSecrets:
  secretManager:
    - versionName: projects/lobbyist-475218/secrets/sentry-auth-token/versions/latest
      env: "SENTRY_AUTH_TOKEN"

# Tags for audit trail
tags:
  - "environment-prod"
  - "manual-approval"
  - "lobbyist-registration"
  - "government-system"

# Logs stored in Cloud Logging (free for 30 days, longer retention requires configuration)
# Using CLOUD_LOGGING_ONLY option above for centralized log management
