// Lobbyist Registration System - Database Schema
// Based on Multnomah County Government Accountability Ordinance

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

enum UserRole {
  PUBLIC         // Read-only access to transparency data
  LOBBYIST       // Can register and submit reports
  EMPLOYER       // Can authorize lobbyists and submit reports
  BOARD_MEMBER   // Can post calendars and receipts
  ADMIN          // Full system access
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  role      UserRole @default(PUBLIC)
  password  String   // Hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lobbyist    Lobbyist?
  employer    Employer?
  boardMember BoardMember?
  auditLogs   AuditLog[]

  @@index([email])
  @@index([role])
}

// ============================================================================
// LOBBYIST REGISTRATION
// ============================================================================

enum RegistrationStatus {
  DRAFT        // In progress, not submitted
  PENDING      // Submitted, awaiting review
  APPROVED     // Active registration
  REJECTED     // Rejected by admin
  INACTIVE     // No longer active
}

model Lobbyist {
  id                   String             @id @default(uuid())
  userId               String             @unique
  name                 String
  email                String
  phone                String
  address              String
  registrationDate     DateTime           @default(now())
  status               RegistrationStatus @default(DRAFT)
  hoursCurrentQuarter  Float              @default(0) // Track hours to determine if registration required
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  employers        LobbyistEmployer[]
  expenseReports   LobbyistExpenseReport[]
  employerPayments EmployerLobbyistPayment[]
  boardReceipts    BoardLobbyingReceipt[]
  violations       Violation[]

  @@index([status])
  @@index([email])
  @@index([registrationDate])
}

model Employer {
  id                  String   @id @default(uuid())
  userId              String?  @unique // Optional if employer doesn't have login
  name                String
  email               String
  phone               String
  address             String
  businessDescription String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user           User?                   @relation(fields: [userId], references: [id], onDelete: SetNull)
  lobbyists      LobbyistEmployer[]
  expenseReports EmployerExpenseReport[]
  violations     Violation[]

  @@index([email])
  @@index([name])
}

// Many-to-many relationship: A lobbyist can work for multiple employers
model LobbyistEmployer {
  id                       String    @id @default(uuid())
  lobbyistId               String
  employerId               String
  authorizationDocumentUrl String? // URL to uploaded PDF/document
  authorizationDate        DateTime?
  startDate                DateTime  @default(now())
  endDate                  DateTime? // Null if still active
  subjectsOfInterest       String // JSON or comma-separated list
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  lobbyist Lobbyist @relation(fields: [lobbyistId], references: [id], onDelete: Cascade)
  employer Employer @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@unique([lobbyistId, employerId, startDate])
  @@index([lobbyistId])
  @@index([employerId])
}

// ============================================================================
// QUARTERLY REPORTING
// ============================================================================

enum ReportStatus {
  DRAFT      // In progress
  SUBMITTED  // Submitted on time
  LATE       // Submitted after deadline
  OVERDUE    // Not yet submitted, past deadline
  REVIEWED   // Admin has reviewed
}

enum Quarter {
  Q1 // Jan 1 - Mar 31 (due April 15)
  Q2 // Apr 1 - Jun 30 (due July 15)
  Q3 // Jul 1 - Sep 30 (due October 15)
  Q4 // Oct 1 - Dec 31 (due January 15)
}

model LobbyistExpenseReport {
  id                     String       @id @default(uuid())
  lobbyistId             String
  quarter                Quarter
  year                   Int
  totalFoodEntertainment Float        @default(0) // Total spent on food/refreshments/entertainment
  status                 ReportStatus @default(DRAFT)
  submittedAt            DateTime?
  dueDate                DateTime
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt

  lobbyist   Lobbyist          @relation(fields: [lobbyistId], references: [id], onDelete: Cascade)
  lineItems  ExpenseLineItem[]
  violations Violation[]

  @@unique([lobbyistId, quarter, year])
  @@index([status])
  @@index([dueDate])
  @@index([lobbyistId, year])
}

enum ExpenseReportType {
  LOBBYIST  // From lobbyist expense report
  EMPLOYER  // From employer expense report
}

model ExpenseLineItem {
  id           String            @id @default(uuid())
  reportId     String // Can be LobbyistExpenseReport or EmployerExpenseReport
  reportType   ExpenseReportType
  officialName String // Name of public official
  date         DateTime
  payee        String // Who received the money
  purpose      String // Description of expense
  amount       Float
  isEstimate   Boolean           @default(false) // True if exact amount unknown
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  lobbyistReport LobbyistExpenseReport? @relation(fields: [reportId], references: [id], onDelete: Cascade)
  employerReport EmployerExpenseReport? @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([officialName])
  @@index([date])
}

model EmployerExpenseReport {
  id                  String       @id @default(uuid())
  employerId          String
  quarter             Quarter
  year                Int
  totalLobbyingSpend  Float        @default(0) // Total spent on lobbying (excluding lobbyist living/travel)
  status              ReportStatus @default(DRAFT)
  submittedAt         DateTime?
  dueDate             DateTime
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  employer         Employer                  @relation(fields: [employerId], references: [id], onDelete: Cascade)
  lineItems        ExpenseLineItem[]
  lobbyistPayments EmployerLobbyistPayment[]
  violations       Violation[]

  @@unique([employerId, quarter, year])
  @@index([status])
  @@index([dueDate])
  @@index([employerId, year])
}

// Track how much employer paid to each lobbyist this quarter
model EmployerLobbyistPayment {
  id               String @id @default(uuid())
  employerReportId String
  lobbyistId       String
  amountPaid       Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  employerReport EmployerExpenseReport @relation(fields: [employerReportId], references: [id], onDelete: Cascade)
  lobbyist       Lobbyist              @relation(fields: [lobbyistId], references: [id], onDelete: Cascade)

  @@unique([employerReportId, lobbyistId])
  @@index([employerReportId])
  @@index([lobbyistId])
}

// ============================================================================
// BOARD MEMBER TRACKING
// ============================================================================

model BoardMember {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  district  String? // Which district they represent
  termStart DateTime
  termEnd   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendarEntries BoardCalendarEntry[]
  lobbyingReceipts BoardLobbyingReceipt[]

  @@index([isActive])
}

model BoardCalendarEntry {
  id              String   @id @default(uuid())
  boardMemberId   String
  eventTitle      String
  eventDate       DateTime
  eventTime       String? // Time as string (e.g., "2:00 PM - 3:30 PM")
  participantsList String // JSON or text list of primary participants
  quarter         Quarter
  year            Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  boardMember BoardMember @relation(fields: [boardMemberId], references: [id], onDelete: Cascade)

  @@index([boardMemberId])
  @@index([eventDate])
  @@index([quarter, year])
}

model BoardLobbyingReceipt {
  id            String   @id @default(uuid())
  boardMemberId String
  lobbyistId    String
  amount        Float
  date          DateTime
  payee         String
  purpose       String
  quarter       Quarter
  year          Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  boardMember BoardMember @relation(fields: [boardMemberId], references: [id], onDelete: Cascade)
  lobbyist    Lobbyist    @relation(fields: [lobbyistId], references: [id], onDelete: Cascade)

  @@index([boardMemberId])
  @@index([lobbyistId])
  @@index([quarter, year])
}

// ============================================================================
// COMPLIANCE & ENFORCEMENT
// ============================================================================

enum EntityType {
  LOBBYIST
  EMPLOYER
  LOBBYIST_REPORT
  EMPLOYER_REPORT
  BOARD_MEMBER
}

enum ViolationType {
  LATE_REGISTRATION     // Registered more than 3 days after exceeding 10 hours
  LATE_REPORT          // Report submitted after deadline
  MISSING_REPORT       // Report not submitted
  FALSE_STATEMENT      // False or misleading information
  PROHIBITED_CONDUCT   // Violation of prohibited conduct rules
  MISSING_AUTHORIZATION // Lobbyist operating without proper authorization
  OTHER
}

enum ViolationStatus {
  PENDING    // Identified but not yet processed
  ISSUED     // Fine issued
  APPEALED   // Under appeal
  UPHELD     // Appeal denied, fine stands
  OVERTURNED // Appeal successful, fine removed
  PAID       // Fine has been paid
  WAIVED     // Fine waived (e.g., first-time education)
}

model Violation {
  id                   String          @id @default(uuid())
  entityType           EntityType
  entityId             String // ID of lobbyist, employer, or report
  violationType        ViolationType
  description          String
  fineAmount           Float           @default(0) // Up to $500
  status               ViolationStatus @default(PENDING)
  issuedDate           DateTime?
  isFirstTimeViolation Boolean         @default(false) // True if educational letter sent instead of fine
  resolutionNotes      String? // Notes about how violation was resolved
  resolutionDate       DateTime? // When violation was resolved (paid, waived, etc.)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  // Relations (one will be populated based on entityType)
  lobbyist        Lobbyist?              @relation(fields: [entityId], references: [id], onDelete: Cascade)
  employer        Employer?              @relation(fields: [entityId], references: [id], onDelete: Cascade)
  lobbyistReport  LobbyistExpenseReport? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  employerReport  EmployerExpenseReport? @relation(fields: [entityId], references: [id], onDelete: Cascade)
  appeals         Appeal[]

  @@index([entityType, entityId])
  @@index([status])
  @@index([issuedDate])
}

enum AppealStatus {
  PENDING    // Submitted, awaiting hearing
  SCHEDULED  // Hearing scheduled
  DECIDED    // Decision made
}

model Appeal {
  id              String       @id @default(uuid())
  violationId     String
  submittedDate   DateTime     @default(now())
  appealDeadline  DateTime // Must be within 30 days of fine notice
  reason          String // Why they're appealing
  status          AppealStatus @default(PENDING)
  hearingDate     DateTime?
  decision        String? // Admin's decision text
  decidedAt       DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  violation Violation @relation(fields: [violationId], references: [id], onDelete: Cascade)

  @@index([violationId])
  @@index([status])
  @@index([hearingDate])
}

// ============================================================================
// CONTRACT REGULATION (§9.230)
// ============================================================================

model ContractException {
  id                   String    @id @default(uuid())
  formerOfficialId     String // Could be User ID or separate tracking
  formerOfficialName   String
  contractDescription  String
  justification        String // Why exception was granted
  approvedBy           String // Name of Chair or approving authority
  approvedDate         DateTime
  publiclyPostedDate   DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([formerOfficialId])
  @@index([approvedDate])
}

// ============================================================================
// AUDIT TRAIL
// ============================================================================

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  action      String // e.g., "CREATE", "UPDATE", "DELETE", "LOGIN"
  entityType  String // e.g., "Lobbyist", "ExpenseReport"
  entityId    String? // ID of affected entity
  changesJson String? // JSON of what changed
  ipAddress   String?
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
  @@index([entityType, entityId])
}
